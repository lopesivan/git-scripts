#!/usr/bin/env bash

test -n "$DEBUG" && set -x

#                      __ __       ___
#                     /\ \\ \    /'___`\
#                     \ \ \\ \  /\_\ /\ \
#                      \ \ \\ \_\/_/// /__
#                       \ \__ ,__\ // /_\ \
#                        \/_/\_\_//\______/
#                           \/_/  \/_____/
#                                         Algoritimos
#
#
#      Author: Ivan Lopes
#        Mail: ivan (at) 42algoritmos (dot) com (dot) br
#        Site: http://www.42algoritmos.com.br
#     License: gpl
#       Phone: +1 561 801 7985
#    Language: Shell Script
#        File: ls-branch.sh
#        Date: Qui 30 Mar 2017 08:39:13 BRT
# Description:
# ----------------------------------------------------------------------------
# Modo strict
#set -euo pipefail
# ----------------------------------------------------------------------------

##############################################################################
##############################################################################
##############################################################################

# ----------------------------------------------------------------------------
# Run!
# git --no-pager log --abbrev-commit --abbrev=7 --pretty=format:'%h %s'
# fbr - checkout git branch
cmd() {
    git describe --abbrev=0 --tags || {
        git tag -a 1.0.0 -m "My version 1.0.0"
            return 1
        }

  #get highest tag number
  local VERSION=$(git describe --abbrev=0 --tags)

  #replace . with space so can split into an array
  local VERSION_BITS=(${VERSION//./ })

  #get number parts and increase last one by 1
  local VNUM1=${VERSION_BITS[0]}
  local VNUM2=${VERSION_BITS[1]}
  local VNUM3=${VERSION_BITS[2]}
  VNUM3=$((VNUM3+1))

  #create new tag
  local NEW_TAG="$VNUM1.$VNUM2.$VNUM3"

  echo `tput bold``tput rev`Updating $VERSION to `tput setaf 3`"$NEW_TAG"`tput sgr0`

  #get current hash and see if it already has a tag
  local GIT_COMMIT=`git rev-parse HEAD`
  local NEEDS_TAG=`git describe --contains $GIT_COMMIT 2>/dev/null`

  #only tag if no tag already
  if [ -z "$NEEDS_TAG" ]; then
      git tag $NEW_TAG

      if ! [ -z $(git remote -v) ];
      then
          echo "Tagged with $NEW_TAG"
          git push --tags
      fi
  else
      echo "Already a tag on this commit"
  fi

}

cmd
# ----------------------------------------------------------------------------
exit 0
